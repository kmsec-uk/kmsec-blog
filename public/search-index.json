[{"slug":"Introduction","category":"blog","title":"An introduction","description":"Launching this blog","tags":["blog","off-topic"],"body":"\nWelcome to my blog. My 2023 New Year's resolution is to share more.\n\nI've already imported an older write-up on ACME DNS challenge with Caddy, as well as some newer content I just got round to writing up.\n\nThis blog will hopefully cover a range of different topics. From detection engineering and analysis to threat intelligence.\n\n## About the blog\nThis blog was built with [Astro](https://astro.build/), using a heavily modified [Astro Ink](https://github.com/one-aalam/astro-ink) theme.\n\nUnder the hood, it utilises [Tailwind CSS](https://tailwindcss.com/) for general styling.\n\n[Prism.js](https://prismjs.com/) is used for code-block styling and highlighting.\n\nThe header banner was generated with [BGjar](https://bgjar.com/)."},{"slug":"caddy-dns-challenge-certs","category":"blog","title":"Caddy: enabling valid internal SSL certificates with ACME DNS challenge","description":"This is an older how-to I wrote on how I provisioned valid SSL certificates on my internal homelab using ACME DNS challenge","tags":["caddy","letsencrypt","lab"],"body":"\nNote from 2023: This is an older how-to I've migrated from an old blog on how I provisioned valid SSL certificates on my internal homelab using ACME DNS challenge so that I didn't have to open ports up to the internet for the usual HTTP challenge. \n\nIt may be useful for those that haven't got valid TLS/SSL/X509 certificates in the homelab yet. Some steps might be outdated.\n<hr/>\n\nThe outcome of this write-up is to have all Docker-hosted services behind Caddy, using valid SSL certificates, *without* exposing any service to the internet.\n\n## Contents\n* Pre-requisites\n* DNS ACME challenge\n* Managing your domain name with DigitalOcean and getting the API key\n* Creating a wildcard DNS entry in dnsmasq\n* Building Caddy with the DNS provider bundle\n* Creating the Caddy docker-compose file\n* Testing\n* Adding real services\n* Reloading Caddy and general administration\n* Conclusion\n\n## Pre-requisites\n* A purchased domain name.\n* A DigitalOcean account (or any other DNS provider which Caddy supports for DNS ACME challenge). If you don't have one already, please use my [referral link](https://m.do.co/c/6f6dff4cca70) to sign up to Digital Ocean.\n    * 💁‍♂️ [Read more about the DNS ACME modules available Caddy](https://caddy.community/t/how-to-use-dns-provider-modules-in-caddy-2/8148)\n    * 🧾 [Check which DNS providers are supported in Caddy](https://github.com/caddy-dns)\n* (Optional) dnsmasq server (or a PiHole server, which uses dnsmasq too)\n* A Docker host with services ready to secure behind Caddy\n\n## DNS ACME challenge\nCaddy uses public ACME CAs such as Let's Encrypt or ZeroSSL to issue valid SSL certificates (as per their [documentation](https://caddyserver.com/docs/automatic-https#overview)).\n\nWith [ACME](https://en.wikipedia.org/wiki/Automated_Certificate_Management_Environment) (Automated Certificate Management Environment), there are several different ways a valid SSL certificate can be issued. When setting up a public-facing website this is fairly trivial as you can simply use the already-exposed port 80 to complete the HTTP challenge (or 443 for TLS-ALPN challenge) and get a certificate that way.\n\nSince my services are never intended to be exposed externally (like you, if you're reading this!), I opted for the DNS challenge. The only \"exposed\" service is my public DNS nameserver (DigitalOcean).\n\nIt's possible to [complete the DNS ACME challenge manually](https://www.digitalocean.com/community/tutorials/how-to-acquire-a-let-s-encrypt-certificate-using-dns-validation-with-acme-dns-certbot-on-ubuntu-18-04), but Caddy does all the work for you and renews certificates when they expire. Once Caddy is setup, certificates require little-to-no effort to maintain.\n\nA picture tells a thousand words:\n\n![caddy-dns-challenge.png](/images/uploads/caddy/caddy-dns-challenge.png)\n\n## Managing your domain name with DigitalOcean and getting the API key\nIn order to complete the ACME DNS challenge, you need to give Caddy API access to your DNS provider.\n\nI've used DigitalOcean for a VPS for quite some time, so using DigitalOcean to manage my DNS instead of any other [Caddy-supported provider](https://github.com/caddy-dns) was a matter of convenience. I've included steps here on how to manage your domain with DigitalOcean.\n\n### 1. Set your nameserver to DigitalOcean's\nFrom your DNS provider's management console, set your nameservers to DigitalOcean's: \n\n![changenameservers.png](/images/uploads/caddy/changenameservers.png)\n\n### 2. Add the Domain in DigitalOcean\nOn the Networking tab, add your domain\n\n![adddomaindigitalocean.png](/images/uploads/caddy/adddomaindigitalocean.png)\n\n### 3. Generate the API key\nGenerate the API key from the API tab in DigitalOcean. Save it for later.\n\n![createapikey.png](/images/uploads/caddy/createapikey.png)\n\n## Creating a wildcard DNS entry in your local DNS server\nI want each service to have its own subdomain. e.g.:\n* `transmission.example.com`\n* `portainer.example.com`\n* `wiki-js.example.com`\n\n\nIf you want to follow this example, you'll either need to create individual A records/hosts entries for each subdomain, or you can create a wildcard DNS entry in dnsmasq and leave all headaches behind.\n\nOn my local PiHole, I just added a dnsmasq config file in `/etc/dnsmasq.d/` for my wildcard domain to point to my Docker host. The syntax is `address=/.domain.tld/10.10.1.250`. My example below shows my personal config. Each service is underneath the `lab.example.com` domain. e.g. `transmission.lab.example.com`.\n```bash\n$ cat /etc/dnsmasq.d/99-dockerhost2.conf\naddress=/.lab.example.com/192.168.1.197\n```\n\n## Building Caddy with the DNS provider bundle\nI should preface that I opted to use Caddy in Docker. It comes as an [official image](https://hub.docker.com/_/caddy). It's usually plug-and-play, but since the DNS ACME bundles are not included by default, we need to build our own container image that we can then use for starting Caddy proper. Read the [Docker Hub page](https://hub.docker.com/_/caddy) from the section *Adding custom Caddy modules* for more information on what this means.\n\nThe following Dockerfile is a carbon copy from the Docker Hub page for Caddy, edited to specify the Caddy version and include the DigitalOcean bundle:\n\n#### Dockerfile\n```dockerfile\nFROM caddy:2-builder AS builder\n\nRUN xcaddy build \\\n    --with github.com/caddy-dns/digitalocean\n\nFROM caddy:2\n \nCOPY --from=builder /usr/bin/caddy /usr/bin/caddy\n ```\n\nSave this Dockerfile to your Docker host, and simply run `docker build -f ./Dockerfile -t \"caddyacme\" .` from the directory.\n\nThis Dockerfile directs to build Caddy with the Digitalocean module and then copies the compiled Caddy binary from the builder image to a standard caddy image.\n\nOnce complete, I had 4 caddy images present:\n* Standard Caddy2 image\n* Standard Builder image\n* The image where the modified Caddy image was compiled (tag-less, large)\n* The slimmer Caddy2 image with the modified Caddy binary copied into it (tag-less, slim). :white_check_mark: This is the one we want to use for Caddy proper!\n\n![dockerimagels.png](/images/uploads/caddy/dockerimagels.png)\n\n>  Once built, you can remove all images other than the slim modified Caddy image.\n\n## Creating the Caddy docker-compose file and dependencies\nWith the newly created Caddy image created, we can now setup the docker-compose file and dependencies.\n\nI followed the instructions from [Caddy's documentation](https://hub.docker.com/_/caddy). Down to creating the site directory even though I don't need it (yet!)\n### Directory structure\nCreate the needful:\n```bash\n$ mkdir caddy_config\n$ mkdir caddy_data\n$ mkdir site\n$ touch Caddyfile\n$ touch docker-compose.yml\n$ docker volume create --name=caddy_data # creates the necessary caddy_data volume\n$ docker network create lab-net-1 # creates a Docker network for all to-be-proxied Docker services. This is so that Caddy can address them by name within the Caddyfile.\n```\nOutcome\n\n![caddytree.png](/images/uploads/caddy/caddytree.png)\n\n(ignore the xcaddy directory, that's where I held the build Dockerfile from the previous step)\n\n### docker-compose.yml\n```yaml\nversion: \"3.7\"\n\nservices:\n  caddy:\n    container_name: caddy-prod\n    environment:\n      - DO_API_KEY=YOUR-DIGITALOCEAN-API-KEY-HERE\n    image: caddyacme\n    restart: unless-stopped\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - /home/tomo/docker/caddy/Caddyfile:/etc/caddy/Caddyfile\n      - /home/tomo/docker/caddy/site:/srv\n      - /home/tomo/docker/caddy/caddy_data:/data\n      - /home/tomo/docker/caddy/caddy_config:/config\nvolumes:\n  caddy_data:\n    external: true\n  caddy_config:\nnetworks:\n    default:\n        external: true\n        name: lab-net-1\n```\nTo make this fit your environment:\n* Use the image ID of the slim tag-less one that was built in the previous step :arrow_up:\n* Add your DigitalOcean API key to the environment section\n* Ensure the network is the same across your different Docker containers. This is so that Caddy can address them by name within the Caddyfile.\n>  Adding your API key directly to the docker-compose.yml comes with risks. Anyone who can read the docker-compose.yml file can access your DigitalOcean account with the permissions provisioned by the key.\n\n### Setup a test service within the Caddyfile\n```\ncaddydemo.lab.example.com {\n        respond \"Hello World\"\n        tls {\n                dns digitalocean {env.DO_API_KEY}\n        }\n}\n```\n## Testing\nWith your docker-compose.yml and Caddyfile modified to your environment, you're ready to test your Caddy setup!\n\nSimply run `docker-compose up` from your project directory so you can stay attached to the logs in realtime. You should see something like tls.obtain and tls.issuance.acme.\n\n![docker-composelogs.png](/images/uploads/caddy/docker-composelogs.png)\n\nThen, navigate to your test page and revel in the security!:\n\n![test-success.png](/images/uploads/caddy/test-success.png)\n\n## Adding real services\nAfter a successful dry run, you can stop the realtime stream of logs with <kbd>Ctrl</kbd> + <kbd>C</kbd> and start adding real services to your Caddyfile. Since I created a dedicated network and ensured all my [containers are on the same network](https://docs.docker.com/compose/networking/), Caddy can address them by their container name:\n```\nportainer.lab.example.com {\n        reverse_proxy portainer:9000\n        tls {\n                dns digitalocean {env.DO_API_KEY}\n        }\n}\n```\nOnce you've added all your services, you can simply run `docker compose up -d` and your work here is done.\n\n## Reloading Caddy and general administration\nWhen using a DNS wildcard in your local DNS server, the only administration required for onboarding a new service is modifying the Caddyfile and reloading Caddy.\n\nThe official Docker Hub page for Caddy has a useful way to reload caddy without having to stop/start the container:\n```bash\ncaddy_container_id=$(docker ps | grep caddy | awk '{print $1;}')\ndocker exec -w /etc/caddy $caddy_container_id caddy reload\n```\nThis process is simpler if you set a container_name like in my docker-compose.yml file above:\n```\ndocker exec -w /etc/caddy caddy-prod caddy reload\n```\nCoincidentally, this is also the way to do general administration within the container if required. For example, running `docker exec -w /etc/caddy caddy-prod caddy fmt --overwrite` will reformat your Caddyfile correctly.\n## Conclusion\nIn this write-up I have hopefully conveyed\n- [x] How to setup a wildcard DNS in your pihole/dnsmasq server (and why it's useful for the homelab)\n- [x] How to build and use a Docker image for Caddy with the bundled modules\n- [x] How to get valid certificates with Caddy and DigitalOcean (or any other provider!), without exposing a single port.\n- [x] How to add to and administer your Caddy\n\nDon't forget to like and subscribe and click the bell icon and checkout my Soundcloud\n"},{"slug":"fingerprinting-pupyrat","category":"blog","title":"Fingerprinting C2s with Shodan","description":"A quick C2 fingerprinting exercise with Shodan","tags":["intel","shodan","iocs"],"body":"I was sent [this post by K7 Security](https://labs.k7computing.com/index.php/pupy-rat-hiding-under-werfaults-cover/) on PupyRAT's latest defense evasion tactics.\n\nThere is one IP address listed as the IOC for C2: `103.79.76.40`\n\nShodan has this IP indexed: it has 3 ports open. 22, 80, and 8443, as demonstrated in the screenshot below:\n\n![shodan-ip.png](/images/uploads/pupyrat/shodan-ip.png)\n\nPer the report from K7 Security, port 8443 is the actual C2 port, so that's where we'll focus fingerprinting.\n## Certificate characteristics\n\nShodan provides the X509 certificate info:\n\n![shodan-ssl-cert.png](/images/uploads/pupyrat/shodan-ssl-cert.png)\n\nAnything jumping out to you? Take a look at this part: `Subject: O=nJiAqbQYJo, OU=CONTROL`\n\nThe O={randomstring} is definitely interesting, but we can't run regular expression searches in Shodan to search for similar patterns, unfortunately. Instead, let's run a search in Shodan:\n```\n// Shodan query:\nssl:\"OU=CONTROL\"\n```\nThe results are promising! It seems rare that we have this string in an SSL certificate:\n![search-control.png](/images/uploads/pupyrat/search-control.png)\n\nThe only problem with the search so far is that it captures certificates with strings like `OU=Control Plane` or `OU=Controller`\n## Refining the search\nGoing back to the certificate from the original IP above, Shodan actually errors out whilst trying to perform a TLS handshake. At the very top of the screenshot you can see: `SSL error: ALERT_HANDSHAKE_ERROR`\n\nWhat if we just add that to our query?\n```\n// Shodan query:\nssl:\"OU=CONTROL\" \"ALERT_HANDSHAKE_ERROR\"\n```\nVoila, we have filtered down to 41 hosts:\n![final-search.png](/images/uploads/pupyrat/final-search.png)\n\nYou can see that these two top IPs in the resultant search fit our original IP's characteristics. Same SSL error, same 10-character random Organisation (`O=...`) string.\n\n## Tuning the search and exploring the indicators\n\nIt wouldn't be good intel without verifying the findings. Based on the original indicator `103.79.76.40`, we'll expect them all to have a random 10-character Organisation string in the SSL certificate.\n\nThis section demonstrates usage of [Shodan CLI](https://cli.shodan.io/). If you don't have a Shodan account and want to follow along, you can [download a copy of the Shodan data from pupy2.json.gz](/samples/pupyrat/pupy2.json.gz).\n\n### Checking the org of the certificate\n\n```bash\n# Download the search results for analysis\nkmsec@penguin:~/shodan/pupy$ shodan download pupy \"ALERT_HANDSHAKE_FAILURE ssl:OU=CONTROL\"\nkmsec@penguin:~/shodan/pupy$ gunzip pupy.json.gz -k\n# extract the Org using jq\nkmsec@penguin:~/shodan/pupy$ cat pupy.json | jq .ssl.cert.subject.O\n\"yAtFKkeuNo\"\n\"zydhwfPhDi\"\n\"KNiZWFLvcu\"\n#  ....snipped for brevity....\n\"ANLdMfjAeV\"\n\"vmware.com\" #<--- ANOMALY\n\"ZSRTijyRdY\"\n#...\n```\nOne IP `147.139.1.96` matches our query but has `O=vmware.com`. Whilst it is probably malicious based on my cursory look, it doesn't match our C2 signature. Let's remove it for good measure with a new query:\n```\n//shodan search\nssl:\"OU=CONTROL\" ALERT_HANDSHAKE_FAILURE -ssl:.com\n```\n### Exploring the indicators\nNow that we have a tuned query with high-confidence results, let's see what's running on these servers.\n\nWe have to re-run a Shodan search to get all the running services on these IPs because when you run a search on specific services like `ssl:blah`, Shodan will only return the data on those ports/services.\n\n```bash\n# Download our tuned query results\nkmsec@penguin:~/shodan/pupy$ shodan download pupy2 \"ALERT_HANDSHAKE_FAILURE ssl:OU=CONTROL -ssl:.com\"\n# gunzip it\nkmsec@penguin:~/shodan/pupy$ gunzip -k pupy2.json.gz\n# Turn the results into comma-separated values\nkmsec@penguin:~/shodan/pupy$ cat pupy2.json | jq .ip_str | sed 's/\"//g' | tr '\\r\\n' ',' \n8.210.107.120,104.156.232.19,43.139.167.131,154.202.59.194,107.152.38.58,35.241.106.118,167.172.234.140,95.216.206.17,92.118.189.172,65.20.71.101,154.202.59.148,158.247.217.200,50.17.201.44,45.77.41.141,103.79.76.40,103.135.34.69,119.3.245.174,103.155.92.32,103.3.60.167,35.220.154.238,178.236.47.4,202.182.106.252,114.55.60.171,35.201.196.246,154.209.95.8,154.202.59.25,212.115.55.53,43.155.117.195,157.245.155.179,141.164.47.226,45.76.208.215,192.169.7.17,47.94.171.155,157.245.155.179,34.92.149.233,104.168.163.200,192.243.122.156,18.143.135.171,167.179.110.215,77.91.101.173,\n# remove the trailing \",\" for the next step\n```\nWhack it into the Shodan query box:\n\n```\n// shodan query:\nip:8.210.107.120,104.156.232.19,43.139.167.131,154.202.59.194,107.152.38.58,35.241.106.118,167.172.234.140,95.216.206.17,92.118.189.172,65.20.71.101,154.202.59.148,158.247.217.200,50.17.201.44,45.77.41.141,103.79.76.40,103.135.34.69,119.3.245.174,103.155.92.32,103.3.60.167,35.220.154.238,178.236.47.4,202.182.106.252,114.55.60.171,35.201.196.246,154.209.95.8,154.202.59.25,212.115.55.53,43.155.117.195,157.245.155.179,141.164.47.226,45.76.208.215,192.169.7.17,47.94.171.155,157.245.155.179,34.92.149.233,104.168.163.200,192.243.122.156,18.143.135.171,167.179.110.215,77.91.101.173\n```\n\nOr for offline analysis using the CLI:\n```bash\nkmsec@penguin:~/experiments/myblog/public$ shodan download ip-data \"ip:8.210.107.120,104.156.232.19,43.139.167.131,154.202.59.194,107.152.38.58,35.241.106.118,167.172.234.140,95.216.206.17,92.118.189.172,65.20.71.101,154.202.59.148,158.247.217.200,50.17.201.44,45.77.41.141,103.79.76.40,103.135.34.69,119.3.245.174,103.155.92.32,103.3.60.167,35.220.154.238,178.236.47.4,202.182.106.252,114.55.60.171,35.201.196.246,154.209.95.8,154.202.59.25,212.115.55.53,43.155.117.195,157.245.155.179,141.164.47.226,45.76.208.215,192.169.7.17,47.94.171.155,157.245.155.179,34.92.149.233,104.168.163.200,192.243.122.156,18.143.135.171,167.179.110.215,77.91.101.173\"\nSearch query:                   ip:8.210.107.120,104.156.232.19,43.139.167.131,154.202.59.194,107.152.38.58,35.241.106.118,167.172.234.140,95.216.206.17,92.118.189.172,65.20.71.101,154.202.59.148,158.247.217.200,50.17.201.44,45.77.41.141,103.79.76.40,103.135.34.69,119.3.245.174,103.155.92.32,103.3.60.167,35.220.154.238,178.236.47.4,202.182.106.252,114.55.60.171,35.201.196.246,154.209.95.8,154.202.59.25,212.115.55.53,43.155.117.195,157.245.155.179,141.164.47.226,45.76.208.215,192.169.7.17,47.94.171.155,157.245.155.179,34.92.149.233,104.168.163.200,192.243.122.156,18.143.135.171,167.179.110.215,77.91.101.173\nTotal number of results:        112\nQuery credits left:             100000\nOutput file:                    ip-data.json.gz\n  [###################################-]   99%  00:00:01\nSaved 112 results into file ip-data.json.gz\nkmsec@penguin:~/experiments/myblog/public$ gunzip -k ip-data.json.gz \n#.... more analysis\n```\nImmediately we get some interesting results!\n![msf-ip.png](/images/uploads/pupyrat/msf-ip.png)\n\n\nI didn't dig much further into this dataset. If you'd like to play around with the data, I've uploaded [ip-data.json.gz for your entertainment](/samples/pupyrat/ip-data.json.gz).\n\nThese IPs are not limited to running PupyRAT and the SSL certificate quirks are not part of the default PupyRAT implementation. This cluster of activity appears to be a specific threat actor group, likely based in China due to the preferred hosting providers and victim profile as mentioned by K7 Security in their original blog post.\n\n## Closing thoughts\nIn less than 20 minutes, I was able to pivot off of an indicator and generate 39 more IOCs to track, block, and share. A brief check of these IPs indicated the majority weren't tracked by intelligence vendors.\n\nHopefully you found following along useful and educational.\n## Indicators\n<div class=\"not-prose\">\n<pre class=\"indicators text-xs font-mono font-medium language-txt no-line-numbers\" data-prismjs-copy=\"Copy indicators\">\n<code>\n8[.]210[.]107[.]120\n104[.]156[.]232[.]19\n43[.]139[.]167[.]131\n154[.]202[.]59[.]194\n107[.]152[.]38[.]58\n35[.]241[.]106[.]118\n167[.]172[.]234[.]140\n95[.]216[.]206[.]17\n92[.]118[.]189[.]172\n65[.]20[.]71[.]101\n154[.]202[.]59[.]148\n158[.]247[.]217[.]200\n50[.]17[.]201[.]44\n45[.]77[.]41[.]141\n103[.]79[.]76[.]40\n103[.]135[.]34[.]69\n119[.]3[.]245[.]174\n103[.]155[.]92[.]32\n103[.]3[.]60[.]167\n35[.]220[.]154[.]238\n178[.]236[.]47[.]4\n202[.]182[.]106[.]252\n114[.]55[.]60[.]171\n35[.]201[.]196[.]246\n154[.]209[.]95[.]8\n154[.]202[.]59[.]25\n212[.]115[.]55[.]53\n43[.]155[.]117[.]195\n157[.]245[.]155[.]179\n141[.]164[.]47[.]226\n45[.]76[.]208[.]215\n192[.]169[.]7[.]17\n47[.]94[.]171[.]155\n157[.]245[.]155[.]179\n34[.]92[.]149[.]233\n104[.]168[.]163[.]200\n192[.]243[.]122[.]156\n18[.]143[.]135[.]171\n167[.]179[.]110[.]215\n77[.]91[.]101[.]173\n</code>\n</pre>\n</div>"},{"slug":"passive-takeover","category":"blog","title":"Passive Takeover - uncovering (and emulating) an expensive subdomain takeover campaign","description":"This post explores an often overlooked type of subdomain takeover attack I am dubbing \"passive takeover.\"","tags":["intel","shodan","iocs","T1584.001","subdomain takeover"],"body":"This post explores an often overlooked type of subdomain takeover attack I am dubbing \"passive takeover.\" This kind of attack is a non-targeted domain takeover that adversaries can use to build resources.\n\n## Spidey sense is tingling\n\nWhilst sleuthing Shodan, I came across a page like this:\n\n![shodan-message.png](/images/uploads/passive-takeover/shodan-message.png)\n\nOpening up in a browser reveals:\n\n![visit-ip.png](/images/uploads/passive-takeover/visit-ip.png)\n\nThis site uses server-side rendering so it doesn't quite make sense yet. If you go to the domain in the certificate it makes a lot more sense:\n\n![mysterymessage.png](/images/uploads/passive-takeover/mysterymessage.png)\n\nThis immediately piqued my curiosity. For the uninitiated, a [subdomain takeover](https://developer.mozilla.org/en-US/docs/Web/Security/Subdomain_takeovers) (Mozilla docs) attack is when someone takes control of a subdomain by creating assets that hijack dangling DNS records. Nowadays, this mostly happens in the form of a CNAME or NS attack. However, in very rare instances (spoiler: like this case) you can also take over A records.\n\n## Scope of operation\n\nThe actor owns ~700 IPs serving this subdomain takeover message. ~650 of these IPs are running in AWS Elastic IP address space. \n\nTheir operation is easily fingerprintable with the following shodan queries:\n\n```\nhttp.favicon.hash:1044386855\nhttp.title:\"subdomain takeover\"\nhttp.headers_hash:-1133016004\nhttp.html:\"I like to look at the source of websites too\" <-- one false positive\n\"X-Subdomain-Takeover: true\" <-- Custom header response from the server\n\n```\nShodan detects a corresponding domain for ~350 of these IPs. The scope of operation is quite large. The other half don't have corresponding domains in Shodan, meaning that some of the domains' A records have been cleaned (or Shodan's data is bad).\n\nThere is no link between targeted domains. The operation appears to be entirely opportunistic.\n\n## Understanding the actor's methodology\n\nUsing the takeover example from the first screenshot, the intriguing part of takeover is that:\n\n- The subdomain record for `melanoma.vitaccess.com` is an A record pointing to a specific IP `35.176.199.36`\n- The IP is part of Amazon AWS EC2 instance IP address space.\n\nThis raises the question: how did the actor manage to take over this subdomain using EC2? IP addresses are randomly assigned on EC2 creation. My initial theory was that they brute force the process:\n\n1. Find a domain with a dangling A record\n2. Keep spinning up an EC2 instance until they hit the jackpot\n\nThis is wildly inefficient and doesn't make sense. Firstly, spamming the creation of EC2 instances until you hit a specific IP is dumb. And secondly, the affected domains are so random that it can't be targeted. A much smarter friend came up with the following theory which ultimately forms the bedrock of the passive takeover attack:\n\n1. Spin up an EC2 instance\n2. Check passive DNS (pDNS) for a current and valid dangling A record\n3. If a valid A record is found: spin up the mysterious landing page, else: abort.\n4. Profit?\n\nThis is a really straightforward process but it requires two things: money and money. Money to create EC2 instances, and money to pay for passive DNS data.\n\n## Is it passive DNS?\n\nThere *are* other ways to fulfill the operation without relying on passive DNS.\n\n1. Check for PTR record -- unlikely to work because it's often not implemented, and the existence of a PTR record on an IP predicates the domain owner being in control of the IP.\n2. Wait for HTTP connections and then lookup to see if the `Host` header points to the new instance -- this method would likely require a long-running operation that might not bear results.\n3. Manual check with search engines or use public intelligence feeds.\n\nThe reason why I'm convinced this actor utilises passive DNS rather than other methods is because it's quick and effective.\n\n### Previous research on cloud instance takeover\n\nWhilst Googling this passive DNS takeover method, I found a discussion [on Hacker News](https://news.ycombinator.com/item?id=17021061) discussing this exact technique. Matt Bryant posted a [great overview of this kind of attack](https://bishopfox.com/blog/fishing-the-aws-ip-pool-for-dangling-domains), but he never open-sourced the tool he used. Unfortunately, this was as close as I could get to explicit research on opportunistic takeover using passive DNS.\n\nI found a [project called eipfish](https://github.com/timkoopmans/eipfish) that is scoped specifically to the Elastic IP range and uses Shodan to check for historical records. `eipfish` is great because you can have multiple Elastic IPs (EIPs) pointing to a single EC2 instance. Unfortunately Shodan's hostname data isn't as accurate as dedicated passive DNS data, but it's a great (and cheap) tool.\n\nAll the projects I could find were scoped specifically to Elastic IPs, but this is far from just an AWS problem.\n\n## Proof-of-concept: Passive Takeover attack\nI was curious just how successful a campaign like this would be so I started scripting something to automate passive takeovers.\n\nMy script uses `vt` (the VirusTotal API commandline tool) and `doctl` (the Digital Ocean API commandline tool) for passive DNS and instance creation, respectively. Whilst this fits my tooling, the concept is simple enough to port over to any scriptable cloud provider or passive DNS data provider.\n\n<script src=\"https://gist.github.com/kmsec-uk/86a3e051b284d8587a6deb93f2967c70.js\"></script>\n\nIronically, I created this script as a loop but every time I run it, I get a domain that can be taken over in the first run. Here's an example:\n\n<script async id=\"asciicast-nHK86VlTyebLGE69UEA0WXylM\" src=\"https://asciinema.org/a/nHK86VlTyebLGE69UEA0WXylM.js\"></script>\n\nAn additional note should you want to test this with DigitalOcean: You may want to just reserve an IP with the API command `doctl compute reserved-ip create`. This way you won't be billed for Droplet creation.\n\nIf you want to try this and don't have a Digital Ocean account, [here's my referral link](https://m.do.co/c/6f6dff4cca70).\n\n#### \"pwning\" the domain\nThis part I didn't even get round to scripting because it was so short and simple.\n1. SSH into the VPS\n2. Download caddy\n3. Write the shortest Caddyfile in existence, emulating the attacker's message:\n```\ndangling-host.com {\n        respond \"subdomain takeover on {http.request.host} - hi from kmsec.uk\"\n}\n```\n4. run caddy: `caddy start`\n5. ... That's it. Caddy automatically issues a certificate from LetsEncrypt and the domain now serves the messsage:\n\n![pwned.png](/images/uploads/passive-takeover/pwned.png)\n\n## The Riddler of subdomain takeovers\nDespite putting myself in the shoes of the actor, the actor's motivation eludes me. \n\nI couldn't identify any malicious intent in their operation (e.g. hijacks, scripts, advertising, phishing) to suggest this is part of a malignant operation.\n\nThey aren't trying to hide their activity, in fact quite the opposite -- their operation is loud and proud. Every HTTP request to the server responds with a custom `X-Subdomain-Takeover: true` header. The HTML contains a mischievous `<!-- I like to look at the source of websites too -->` comment. But they aren't advertising who they are or claiming clout or bounty.\n\nTaking ownership of 700 Elastic IPs/EC2 instances just to display a mysterious message is an expensive stunt. This is [roughly](https://calculator.aws/#/addService/ElasticIP) a $2000/month operation so they are clearly well-funded. Perhaps this is a research company looking to claim some publicity? If so, why not put their logo straight on the front page? Why not inform the owners of the domain in good faith?\n\nPerhaps this is just an eccentric side-hobby of a well-funded and patient independent actor. The Riddler of subdomain takeovers. If so, they have definitely given me some interesting food for thought!\n\n## Closing thoughts and detection ideas\nThis actor was entertaining to emulate, but this operation (and my personal successes with this technique) highlights a concerning risk in cloud development and losing track of dangling assets. The risks are fairly obvious but I'll spell them out:\n\n- Reputation damage\n- Phishing\n- Cookie stealing\n- Fraud\n\nAnd attackers have increasing reason to hunt for arbitrary targets:\n- Protect operational security (piggyback on someone else's domain)\n- Gaining a valid certificate\n- Opportunistic extortion\n- lulz\n\nMitigation and prevention are easy but also easy to miss: \n\n* **Mitigate**: simply remove the A record from your DNS provider\n* **Prevent**: conduct reviews of existing infrastructure, and regularly review DNS records for dangling assets\n* **Detect**: track certificate transparency logs for certificates generated for your domain. Monitor your domain with an attack surface management tool.\n\n## Indicators\nBelow are a list of 345 IPs and corresponding domains the mysterious actor has taken over. This list was curated from the 700 IPs they own to exclude the ec2 naming convention (ec2-1-1-1-1.compute-1.amazonaws.com) and IPs without corresponding hostname data from Shodan. You can [view the ip-to-hostname relationship in this JSON file](/samples/passive-takeover/valid_domain_ip_matches.json).\n\n<div class=\"not-prose\">\n<pre class=\"indicators text-xs font-mono font-medium language-txt no-line-numbers\" data-prismjs-copy=\"Copy indicators\">\n<code>\n54[.]183[.]152[.]89\n13[.]57[.]6[.]80\n54[.]215[.]11[.]28\n52[.]53[.]227[.]116\n54[.]153[.]13[.]63\n54[.]153[.]98[.]98\n54[.]215[.]249[.]0\n54[.]183[.]254[.]37\n18[.]102[.]68[.]216\n54[.]84[.]193[.]220\n35[.]176[.]199[.]36\n3[.]80[.]161[.]15\n34[.]241[.]93[.]152\n54[.]154[.]50[.]127\n52[.]15[.]144[.]167\n15[.]223[.]120[.]197\n52[.]50[.]181[.]41\n54[.]193[.]100[.]173\n54[.]175[.]233[.]117\n3[.]14[.]6[.]128\n52[.]31[.]28[.]70\n18[.]232[.]185[.]95\n54[.]184[.]72[.]101\n18[.]144[.]35[.]64\n3[.]211[.]233[.]24\n13[.]56[.]211[.]182\n34[.]213[.]213[.]75\n52[.]26[.]221[.]152\n34[.]201[.]23[.]87\n54[.]208[.]247[.]209\n54[.]171[.]6[.]165\n34[.]210[.]26[.]205\n13[.]52[.]67[.]73\n3[.]235[.]183[.]114\n54[.]226[.]24[.]129\n13[.]56[.]182[.]105\n34[.]217[.]175[.]122\n52[.]14[.]156[.]161\n54[.]162[.]128[.]191\n54[.]219[.]192[.]82\n52[.]16[.]39[.]143\n13[.]56[.]158[.]158\n3[.]144[.]243[.]70\n3[.]122[.]101[.]108\n52[.]213[.]254[.]3\n54[.]244[.]4[.]46\n54[.]215[.]202[.]102\n54[.]174[.]134[.]251\n3[.]92[.]83[.]168\n52[.]211[.]73[.]251\n35[.]180[.]60[.]112\n99[.]79[.]53[.]38\n52[.]210[.]188[.]171\n107[.]21[.]25[.]71\n107[.]21[.]22[.]165\n52[.]53[.]252[.]57\n54[.]229[.]241[.]79\n54[.]67[.]55[.]15\n52[.]208[.]85[.]156\n35[.]178[.]5[.]74\n52[.]43[.]49[.]189\n3[.]93[.]40[.]187\n3[.]128[.]27[.]178\n54[.]187[.]193[.]102\n18[.]156[.]174[.]77\n18[.]144[.]27[.]237\n54[.]175[.]128[.]211\n54[.]183[.]13[.]242\n3[.]140[.]239[.]136\n54[.]241[.]85[.]172\n52[.]8[.]207[.]208\n54[.]245[.]14[.]50\n3[.]96[.]210[.]154\n3[.]131[.]94[.]71\n18[.]130[.]23[.]213\n52[.]205[.]74[.]24\n54[.]175[.]67[.]86\n3[.]101[.]111[.]143\n54[.]177[.]119[.]181\n13[.]56[.]13[.]177\n54[.]237[.]234[.]89\n3[.]136[.]106[.]125\n18[.]197[.]10[.]123\n54[.]226[.]21[.]102\n18[.]193[.]66[.]154\n34[.]229[.]146[.]29\n3[.]80[.]247[.]79\n34[.]242[.]230[.]20\n18[.]196[.]250[.]31\n34[.]243[.]97[.]168\n15[.]161[.]183[.]149\n174[.]138[.]109[.]102\n3[.]141[.]103[.]154\n107[.]23[.]130[.]249\n3[.]19[.]217[.]192\n3[.]140[.]184[.]198\n18[.]215[.]63[.]124\n34[.]244[.]11[.]56\n54[.]183[.]13[.]120\n52[.]87[.]251[.]186\n18[.]144[.]37[.]190\n34[.]204[.]45[.]179\n54[.]93[.]192[.]60\n164[.]92[.]102[.]57\n18[.]133[.]243[.]177\n35[.]182[.]73[.]42\n63[.]35[.]213[.]104\n34[.]207[.]120[.]173\n54[.]154[.]173[.]115\n52[.]53[.]224[.]187\n18[.]212[.]78[.]220\n34[.]204[.]194[.]143\n13[.]56[.]195[.]90\n174[.]129[.]54[.]26\n54[.]215[.]130[.]94\n34[.]213[.]214[.]22\n100[.]27[.]34[.]209\n54[.]89[.]102[.]233\n35[.]171[.]203[.]141\n3[.]135[.]202[.]134\n54[.]89[.]143[.]7\n176[.]34[.]89[.]47\n54[.]193[.]72[.]113\n18[.]130[.]52[.]28\n34[.]204[.]166[.]232\n54[.]203[.]122[.]109\n54[.]215[.]253[.]48\n3[.]101[.]88[.]130\n18[.]220[.]2[.]220\n54[.]84[.]240[.]212\n18[.]204[.]44[.]9\n52[.]72[.]21[.]236\n52[.]13[.]30[.]108\n34[.]219[.]154[.]25\n18[.]194[.]63[.]61\n54[.]172[.]125[.]59\n100[.]26[.]161[.]53\n34[.]254[.]247[.]113\n204[.]236[.]192[.]110\n23[.]23[.]12[.]156\n52[.]14[.]230[.]110\n35[.]181[.]53[.]198\n52[.]208[.]204[.]73\n52[.]202[.]126[.]38\n18[.]170[.]214[.]45\n3[.]8[.]15[.]244\n54[.]172[.]216[.]187\n18[.]182[.]61[.]135\n54[.]173[.]248[.]255\n54[.]226[.]135[.]173\n15[.]222[.]172[.]69\n54[.]198[.]232[.]255\n54[.]67[.]61[.]161\n54[.]163[.]195[.]48\n143[.]244[.]171[.]172\n35[.]183[.]34[.]135\n44[.]195[.]47[.]140\n13[.]40[.]177[.]14\n18[.]207[.]2[.]86\n54[.]201[.]8[.]176\n143[.]244[.]171[.]172\n143[.]244[.]171[.]172\n34[.]254[.]244[.]251\n3[.]145[.]97[.]4\n52[.]14[.]61[.]186\n13[.]52[.]219[.]86\n34[.]236[.]216[.]231\n54[.]195[.]179[.]20\n54[.]172[.]141[.]206\n54[.]145[.]47[.]245\n13[.]56[.]16[.]217\n54[.]152[.]127[.]5\n35[.]183[.]181[.]72\n54[.]197[.]207[.]51\n54[.]234[.]40[.]222\n3[.]228[.]219[.]148\n54[.]215[.]189[.]243\n54[.]158[.]205[.]242\n52[.]59[.]254[.]147\n18[.]219[.]104[.]42\n18[.]216[.]27[.]95\n54[.]183[.]235[.]221\n54[.]159[.]37[.]254\n54[.]152[.]8[.]201\n54[.]228[.]104[.]38\n54[.]219[.]221[.]26\n52[.]60[.]205[.]71\n54[.]170[.]2[.]34\n15[.]222[.]5[.]151\n13[.]38[.]244[.]156\n54[.]93[.]194[.]112\n34[.]247[.]73[.]73\n176[.]34[.]37[.]104\n35[.]180[.]22[.]43\n54[.]183[.]216[.]114\n52[.]23[.]213[.]167\n3[.]112[.]109[.]179\n35[.]78[.]247[.]172\n54[.]152[.]216[.]113\n107[.]20[.]26[.]160\n52[.]47[.]156[.]99\n3[.]226[.]251[.]249\n54[.]236[.]112[.]162\n52[.]53[.]239[.]223\n13[.]56[.]227[.]218\n3[.]8[.]208[.]132\n54[.]195[.]34[.]205\n52[.]30[.]222[.]12\n54[.]211[.]78[.]46\n107[.]22[.]146[.]224\n52[.]17[.]13[.]251\n3[.]64[.]165[.]171\n52[.]53[.]225[.]118\n13[.]40[.]114[.]210\n54[.]201[.]244[.]136\n54[.]215[.]214[.]160\n54[.]197[.]121[.]108\n54[.]93[.]124[.]195\n18[.]234[.]113[.]12\n3[.]72[.]60[.]246\n18[.]144[.]8[.]157\n13[.]57[.]185[.]59\n54[.]183[.]3[.]135\n13[.]59[.]4[.]150\n52[.]53[.]247[.]197\n3[.]231[.]26[.]52\n3[.]73[.]119[.]27\n54[.]183[.]250[.]235\n34[.]247[.]68[.]210\n18[.]184[.]218[.]162\n34[.]234[.]94[.]21\n54[.]250[.]238[.]221\n3[.]12[.]164[.]29\n54[.]193[.]62[.]18\n18[.]192[.]107[.]63\n3[.]93[.]156[.]240\n18[.]220[.]233[.]221\n54[.]215[.]208[.]99\n34[.]216[.]221[.]240\n15[.]188[.]89[.]38\n18[.]222[.]40[.]255\n13[.]48[.]132[.]234\n13[.]57[.]248[.]168\n107[.]23[.]249[.]140\n54[.]241[.]29[.]104\n54[.]85[.]68[.]213\n54[.]237[.]48[.]140\n54[.]64[.]226[.]215\n54[.]194[.]35[.]117\n35[.]183[.]127[.]99\n54[.]167[.]180[.]62\n34[.]204[.]91[.]238\n52[.]86[.]234[.]254\n54[.]183[.]88[.]23\n54[.]196[.]237[.]40\n52[.]53[.]218[.]168\n54[.]193[.]16[.]5\n18[.]191[.]147[.]240\n18[.]134[.]180[.]117\n3[.]239[.]205[.]23\n13[.]40[.]95[.]155\n54[.]193[.]134[.]12\n54[.]171[.]223[.]1\n34[.]220[.]227[.]11\n3[.]83[.]238[.]54\n54[.]90[.]176[.]46\n54[.]152[.]232[.]23\n15[.]188[.]26[.]180\n54[.]202[.]47[.]35\n54[.]86[.]115[.]24\n52[.]91[.]157[.]92\n54[.]153[.]45[.]28\n18[.]216[.]160[.]58\n54[.]193[.]75[.]220\n13[.]56[.]20[.]69\n18[.]222[.]237[.]175\n3[.]82[.]16[.]183\n3[.]101[.]83[.]25\n54[.]164[.]187[.]199\n54[.]219[.]145[.]19\n54[.]153[.]19[.]22\n52[.]52[.]110[.]78\n15[.]237[.]37[.]30\n35[.]172[.]141[.]73\n54[.]93[.]187[.]21\n54[.]183[.]138[.]36\n3[.]14[.]134[.]182\n3[.]231[.]55[.]233\n35[.]153[.]129[.]131\n13[.]37[.]253[.]17\n3[.]71[.]100[.]112\n44[.]193[.]203[.]151\n54[.]241[.]15[.]97\n52[.]91[.]138[.]156\n54[.]177[.]124[.]96\n146[.]190[.]220[.]214\n54[.]183[.]202[.]68\n18[.]117[.]150[.]251\n54[.]154[.]121[.]72\n54[.]183[.]143[.]203\n3[.]91[.]156[.]85\n54[.]166[.]166[.]79\n54[.]149[.]50[.]178\n52[.]91[.]51[.]173\n34[.]204[.]166[.]134\n52[.]16[.]101[.]205\n54[.]208[.]181[.]104\n54[.]173[.]74[.]242\n52[.]27[.]235[.]125\n35[.]182[.]242[.]119\n54[.]91[.]123[.]123\n3[.]12[.]197[.]178\n3[.]8[.]201[.]200\n18[.]220[.]162[.]130\n54[.]210[.]39[.]220\n44[.]200[.]35[.]84\n54[.]67[.]88[.]203\n18[.]216[.]143[.]247\n18[.]188[.]92[.]245\n54[.]84[.]203[.]243\n54[.]228[.]146[.]213\n54[.]172[.]98[.]159\n54[.]154[.]29[.]149\n13[.]49[.]241[.]153\n107[.]21[.]199[.]241\n18[.]188[.]20[.]60\n3[.]133[.]86[.]244\n35[.]167[.]214[.]162\n54[.]91[.]9[.]247\n18[.]220[.]118[.]244\n52[.]207[.]143[.]49\n3[.]220[.]167[.]140\n3[.]122[.]97[.]203\n54[.]173[.]202[.]117\n54[.]173[.]248[.]243\n18[.]195[.]97[.]242\n35[.]180[.]227[.]98\n50[.]18[.]145[.]41\n54[.]154[.]54[.]197\n107[.]23[.]82[.]11\n107[.]23[.]94[.]249\n3[.]140[.]208[.]210\n174[.]129[.]56[.]238\n35[.]153[.]177[.]232\n54[.]183[.]75[.]82\neducation[.]sugarcrmdemo[.]com\n1356226205[.]sparkstreetdigital[.]net\nreports[.]mobivity[.]com\ndonttrip[.]technologists[.]cloud\nroom[.]remotepc[.]com\nian-edge[.]organization[.]arterys[.]com\nftgo[.]whochange[.]com\nsantanarow[.]powerflex[.]com\nwww[.]khtf[.]xyz\ndev[.]stargreetz[.]com\nmelanoma[.]vitaccess[.]com\npezhawsvpn[.]softether[.]net\nvpn[.]phrasee[.]co\npressrelease[.]emporioarmani[.]vespa[.]com\nnfo[.]adityabirlacapital[.]com\nstaging-admin[.]molekule[.]com\nraffle[.]nationaltrust[.]org[.]uk\ndev[.]flamzy[.]com\nseamus[.]deck10[.]media\ncertified[.]dupontregistry[.]com\np-video-wowza-15[.]video[.]kerkdienstgemist[.]nl\nqa07[.]inx[.]co\nlicitamex[.]pinarestapalpa[.]com\ntest[.]aws[.]icuracao[.]com\nb2bsolutions-stage[.]msv[.]mckinsey[.]com\njenkins[.]sperse[.]com\nftp[.]pcexpert[.]com[.]tw\nwww[.]mybusybuilding[.]com\n5a26a5868d56c[.]streamlock[.]net\ncms-int[.]jansport[.]com\nvideo-wowza-63[.]video[.]kerkdienstgemist[.]nl\nvpn[.]business[.]machinemetrics[.]com\nrelay[.]demonet[.]orbs[.]com\nstaging[.]surveywings[.]com\nsession-manager1[.]anastasiadate[.]com\njs[.]sellwithleaf[.]com\nold-site[.]setschedule[.]com\ndev-ppp[.]iccsafe[.]org\ndr-webhooks[.]feedonomics[.]com\nrollback[.]mfg[.]com\nsandbox-app[.]moneymover[.]com\ndicom-sr[.]organization[.]arterys[.]com\nvpn[.]rtfkt[.]com\nid[.]lend[.]mn\nnexus[.]augment[.]com\ntestlink[.]dev[.]identiv[.]com\nc[.]clouthub[.]com\nportal[.]imperson[.]com\nstaging-photocontest[.]rentjoy[.]com\nwww[.]playdota[.]com\nfront-03[.]oneup[.]com\nbastion[.]myserve[.]co\nagent[.]ct[.]web[.]identity[.]ky\nidentity[.]ensighten[.]com\nfire[.]copart[.]com\ndistributor[.]kamran[.]dev-serendipity[.]wadic[.]net\nnat[.]xara[.]com\nkjsinclair[.]com\nqa-api[.]geoplace[.]co[.]uk\nh4txezppb1[.]testdrive[.]ukmdemo[.]com\nportal[.]pingstart[.]com\napp-dev[.]carfeine[.]com\nsendy[.]localstack[.]cloud\nniagaranetworks[.]com\nchirpstack-new[.]pycom[.]io\nwww[.]mlpen[.]com\nsandbox[.]cloudapi[.]nielsen[.]com\ndemo-connections[.]qumu[.]com\npush[.]subdineapis[.]com\nmd[.]creativelive[.]com\ndemo[.]activegrid[.]com\ndlma[.]azuga[.]com\nwww[.]btoys[.]cz\nremovebg-backend-old[.]invideo[.]io\nphoton[.]transportapi[.]com\ncloud-rancher[.]misfit[.]com\nunagi[.]eeygcr[.]ga\nawsc[.]jiamy[.]xyz\nus2[.]node[.]newbull[.]org\nworkbench-jail[.]psiquantum[.]com\nvoice[.]whisper[.]sh\norder[.]globein[.]com\nvasilii[.]int[.]giosg[.]com\nwww[.]caymanchile[.]cl\napm-dev[.]orobix[.]com\ncs[.]theoreminc[.]net\narm[.]kasmweb[.]com\ngit2[.]tickaroo[.]com\ndiffusion[.]mvpworkshop[.]co\nclickhouse[.]analytics[.]eu[.]silktide[.]com\nwww[.]jhwf[.]xyz\nscheduler[.]outsite[.]co\nwhistleblower[.]rbw[.]it\ngp[.]mogo[.]ca\nevents[.]forbesmiddleeast[.]com\njenkins[.]datalogics[.]com\nintel-prod[.]dragos[.]com\nmon[.]snapcall[.]io\nlab[.]ivr[.]pindrop[.]com\naws[.]syncdog[.]com\nadmin[.]bestcompany[.]com\nstage[.]ambbrosia[.]com\nmenuino[.]com\napy[.]vision\ncomms[.]kuflink[.]com\nunifi[.]resonancedev[.]ca\nwww-live[.]realeyesit[.]com\nshindansite[.]net\nnifi-stage[.]ona[.]io\nproof[.]techwire[.]net\ntest1[.]ialottery[.]com\ndemo[.]fundamentals[.]digital\nstart[.]tryvantagepoint[.]com\ntpxe[.]warnerbros[.]com\ncustomapparel[.]michaels[.]com\njenkins[.]dat[.]com\nstudent4-code[.]network[.]demoredhat[.]com\ntwistlock[.]telus[.]digital\napi-dev[.]pdffiller[.]com\nsleepezee[.]bobot[.]in\nhelpdesk[.]tankutility[.]com\nvc[.]identity[.]ky\nindiaevent[.]bamkosandbox[.]com\nlow[.]tier2[.]solutions\ncs[.]siftsecurity[.]com\nvpn[.]stem[.]com\ntest[.]adembak[.]dpp[.]openshift[.]com\ntraditionsofamerica[.]glpreview[.]com\ncovid19[.]api[.]iottech[.]cl\ninvite[.]ethics[.]org\nla[.]digitalaloha[.]com\nbeta5[.]gocanvas[.]com\nbitpay[.]ravencoin[.]org\nteam-search[.]knote[.]com\ntj294[.]37927[.]online\nwww[.]pen[.]privakey[.]com\njump01[.]infra[.]cloudinsights[.]netapp[.]com\nav[.]halliburton[.]com\ngitlab[.]fastsolucoes[.]com[.]br\napi2-stage[.]weav[.]io\norigin-aws[.]blogs[.]voanews[.]com\nb2b-dash[.]darcmatter[.]com\ndev-adv-hotfix-1097[.]webgains[.]cloud\nnaynas[.]com\ncertificate-pdf-generator[.]nuiteq[.]com\nchatbot[.]thecyberhelpline[.]com\nconsole[.]jysk[.]ca\ngarage2[.]dinngo[.]co\ncertbot[.]canstockphoto[.]com\nmoney[.]tools[.]benzinga[.]com\nssofresh[.]firstmajestic[.]com\ndataretriever[.]nrgtunnel[.]com\nguoyuxin19-02c52dbf702ac4f12[.]qaboot[.]net\nice[.]wildapricot[.]com\noutsite[.]co\nmail[.]shavacadu[.]com\nmx[.]andersencorp[.]mangoapps[.]com\nhelpdesk[.]ember[.]ltd\nfocus[.]brafton[.]com\nns3[.]gavinmc[.]com\nscheduler[.]outsite[.]co\noutsite[.]co\niamobile2[.]halliburton[.]com\nkms[.]stg-01[.]env[.]acquire[.]io\ndsspoc[.]dssdemo-se[.]dataiku[.]com\nlocalshoppa-web-04[.]localshoppa[.]com[.]au\nstage[.]mailparser[.]io\nwip-devs[.]adthena[.]com\nns2[.]mgmt[.]ue1[.]pre[.]aws[.]cloud[.]arity[.]com\nwww[.]nutrimetermobileaws[.]horlicks[.]in\ndocker[.]saddleback[.]com\nvpn[.]provbppr[.]com\nstarsboss[.]xyz\ngraylog-prod03[.]paperspace[.]com\nbeta[.]sensorcloud[.]com\ncodealike[.]torc[.]dev\nwww[.]emailstats[.]chopra[.]com\nimages[.]listia[.]com\nlegacy-latam[.]heymondo[.]com\nstaging-gptrac[.]sixfeetup[.]com\nsql[.]solarimpulse[.]com\nfamilynetwork[.]fandango[.]com\nwww[.]vbcpod2[.]com\nredux[.]rhizome[.]org\ntraining[.]infomill[.]com\n6161[.]wsgr[.]com\nhubot-0e50129fd8e93dc59[.]ghe-test[.]com\nukpn[.]nmcaydence[.]com\nshop[.]advpharmacy[.]com\ndev-dashboard[.]vegaxholdings[.]com\nkviz[.]tetalena[.]cz\nmm[.]screach[.]com\ntokyo-test[.]sbicrypto[.]com\neu-vod-aspera[.]fubo[.]tv\nus-west-1[.]vpn[.]norwoodsystems[.]io\nsentry[.]infer[.]com\nugv[.]neurala[.]com\nblackbox[.]walee[.]pk\nkibana[.]mobilewalla[.]com\nwww[.]cabin7systems[.]com\nsanita-localhosting-dhis2[.]bluesquare[.]org\nsimcanary00[.]cadesport[.]com\napi-checker[.]mickael-boillaud[.]tech\nvmeet-test-deploy[.]11sight[.]com\napptest[.]virginmobile[.]co\nansible-pr-347-5e2ce67b[.]feature[.]webgains[.]team\nsecureaccess[.]unit4[.]com\nphysicals[.]fastmarkets[.]com\nprod-i-e8485d71[.]tnl[.]flirservices[.]com\nwoo[.]runalloy[.]com\ngit[.]xtremepush[.]com\nexample[.]sumo[.]app\ncaliforec[.]cbk23[.]xyz\ncloud-test[.]converis[.]clarivate[.]com\nprod-demo[.]sandbox[.]truera[.]com\nftp[.]crazybaby[.]com\ninvestorapis[.]untapped-global[.]com\nsp[.]softwareag[.]com\nhubtester[.]mirado1[.]info\nweb2[.]viewar[.]com\ntestsite[.]spire[.]com\ndose[.]vinsol[.]com\ntest[.]worldplumbing[.]org\nunicorp[.]venedigital[.]com\nns[.]acalvio[.]com\nstudent1-code[.]smrtmgmt12903[.]autom8r[.]us\nvc-leipzig[.]de\nblog[.]avena[.]io\nacc[.]kwink[.]nl\nfullnode2[.]coti[.]io\napi[.]ecowater[.]com\ndemo[.]payme[.]tokyo\nprod-op-auditing[.]anytimepediatrics[.]com\ntimeseries[.]coinalytix[.]io\nwww[.]mfone[.]tech[.]co[.]ke\ntestwp1[.]konfirmi[.]com\ntraining-sandbox[.]veeva[.]com\nsso-saml-pwl[.]duocorp-grajput-test[.]org\nsftp[.]flingo[.]tv\nwww[.]elrincondenico[.]com\ndemos[.]stage[.]huntington[.]com\nlogs[.]quizza[.]org\nsockets[.]bestcompany[.]com\nkshbdn207a[.]internal[.]demdex[.]com\nstat[.]yep[.]zone\nnjrc[.]elitestrategies[.]dev\npegasus3[.]dataminr[.]com\nad[.]macromill[.]com\nawseu-ws02[.]inbenta[.]com\nartie2[.]kg-stage[.]com\n3[.]prod[.]joveo[.]com\ntridev[.]apple[.]fieldflex[.]com\ntestingeip[.]craft[.]co\nlabs[.]indinero[.]com\njenkins[.]presonus[.]com\nmg[.]vipteacn[.]xyz\nmarketplace[.]organization[.]arterys[.]com\nmturk[.]parl[.]ai\nspark[.]bymiles[.]co[.]uk\ngimli[.]arcamax[.]com\nchipex[.]wiro[.]agency\nwww[.]startfromscratch[.]co[.]in\nadv-test-maria[.]webgains[.]cloud\nstage[.]appetize[.]io\nbotein[.]bigml[.]com\ndev[.]fieldnation[.]com\nenterprise-demo-2[.]coveralls[.]io\ndemo-instance[.]aws[.]ds[.]dataiku[.]com\nwwwelk[.]aerospike[.]com\nbastion[.]loadtest3[.]mountain[.]siriusxm[.]com\nbastion[.]audiosocket[.]com\ncrvtest2[.]whitehax[.]com\nmeet[.]fayre[.]com\nwww[.]staging[.]bitdatasolutions[.]com\nigen[.]acegrades[.]com\nvalidator-api[.]tezro[.]com\nstag[.]votervoice[.]net\nweb2[.]looksai[.]com\nmonitor[.]grow[.]com\nah2[.]intvenlab[.]com\nmail[.]presidency[.]e-somaliland[.]com\nse[.]thoughtspot[.]com\nwww[.]moodle[.]internal[.]babbel[.]com\nsmsmanager[.]comocrm[.]com\nradius[.]space[.]ge\nforum[.]panzura[.]com\nwww[.]app[.]questionbang[.]com\ntnet-daemon[.]singularitynet[.]io\nredirectorthingy[.]emergingtech[.]charterlab[.]com\nsso[.]devtr[.]es\nocserv[.]workmotion[.]com\nvpn[.]quadency[.]com\nwiki[.]aquabyte[.]ai\naws-us-east-1-dev[.]0[.]dblayer[.]com\ntr99999[.]com\nzales[.]com\ndev[.]quizbooklet[.]net\ndev-voip[.]tezro[.]com\napix[.]dev[.]cloudbroker[.]vodafone[.]com\nsmartcredit[.]topflight[.]tech\nagile[.]lftechnology[.]com\njobs2[.]floatingapps[.]com\nns2[.]nunetnetworks[.]net\nsandbox2[.]innovmetric[.]com\nrunninghit-blog[.]inkopon[.]com\nfv[.]rd[.]eu[.]clara[.]net\ndevteste[.]pharmaviews[.]com[.]br\nwww[.]harvardpartners[.]net\nwww[.]wasmun[.]net\nmeet[.]lytemedical[.]com\nindia[.]dealersocket[.]com\ngm-poc-pm[.]my-invenio[.]com\ndev-ben-api[.]d[.]bark[.]com\nstg[.]lily[.]fi\ndashboardqa[.]credible[.]com\ncpcalendars[.]hqcoworking[.]floowmer[.]com[.]br\nbull-q-ssl[.]uniqueideas[.]com\nstatus[.]narwall[.]io\nreactor-1[.]fusionauth[.]io\ndatameshdemomfa[.]accentureanalytics[.]com\nstaging[.]solgari[.]com\nlightuptheholidays[.]etg[.]hearst[.]com\ndev[.]notrehistoire[.]ch\nwkp[.]weave[.]works\nadmin[.]demo[.]bonbon24h[.]com[.]vn\ntestnet[.]gwallet[.]tech\npilotcyber[.]orgcyberrange[.]com\nwww[.]stithi[.]in\nrtmp[.]cyberfmradio[.]com\ndealer[.]keemut[.]com\npayments[.]monchilla[.]com\nmktg-util-dev[.]liveperson[.]com\naws-midgard1[.]thorwallet[.]org\nchat[.]development[.]macrofab[.]com\nplatform-legacy[.]srvr[.]acclaimworks[.]com\ndurazno[.]crisp[.]nl\nknstl-api[.]konstellation[.]tech\njenkins[.]whitewatergames[.]net\nwww[.]yfha[.]xyz\nonyx-it[.]mycybercns[.]com\ndev[.]bunchmate[.]com\nsec00payment-amazon[.]x24hr[.]com\nwebdev01[.]camryeffect[.]toyota[.]com\nruby3[.]honeybadger[.]io\nnaveen-meet[.]remotepc[.]com\n</code>\n</pre>\n</div>"},{"slug":"tracking-crimson-kingsnake","category":"blog","title":"Tracking Crimson Kingsnake","description":"Using VirusTotal to track Crimson Kingsnake","tags":["virustotal","phishing","fraud","intel","iocs","crimson kingsnake"],"body":"Back in November 2022, I was looking into the Crimson Kingsnake actor, who were profiled by Abnormal Security in [their write-up](https://abnormalsecurity.com/blog/crimson-kingsnake-bec-group-attacks). In summary, Crimson Kingsnake use well-conceived and highly-targeted lures to facilitate invoice fraud.\n\nI used VirusTotal to pivot off metadata in email and invoice samples, profile victim organisations, and ultimately got some great indicators and patterns to track this actor.\n\n## Campaign playbook\n\nThe fraudster sends a single lure, and follows it up with a thread of replies. The first lure:\n\n![1st-lure.png](/images/uploads/crimsonkingsnake/1st-lure.png)\n\nThe initial lure comes comes from what I presume to be a compromised Office365 environment, as ed3p[.]com appears to be a legitimate company and the header is valid.\n\nThe English is good, the context is believable, and it was targeted to a well-positioned employee in finance.\n\nThe story gets interesting with the second email. The fraudster spins up a fake thread to the CEO mail@work-desk02[.]space with the victim CC'd. Note that they pivot from using the compromised Office365 infrastructure to their own infrastructure for sending emails:\n\n![follow-up-1-ceo.png](/images/uploads/crimsonkingsnake/follow-up-1-ceo.png)\n\nWith further pressure, the fraudster then sends a PDF formatted invoice.\n#### Invoice first page\n![invoice-1st-page.png](/images/uploads/crimsonkingsnake/invoice-1st-page.png) \n#### Invoice second page\n![invoice-2nd-page.png](/images/uploads/crimsonkingsnake/invoice-2nd-page.png)\n\n## Analysis and Threat Actor profile\nThey had a flurry of activity in Autumn 2022, and since roughly December 2022, they've gone underground or changed tactics. I believe a lot of their infrastructure and financial operations have been disrupted by various parties.\n* They are reasonably competent and decently-resourced. Since their initial lures often come from compromised Office365 environments, they either have the skills in-house or are well-networked with other Threat Actor groups.\n* During this campaign, they were impersonating legal firms (Clifford Chance and Simmons & Simmons), and used pretty phishy subject lines:\n  ```bash\n  f40816615b7b38c517b47cdf6d4ff33a2f08e873b988d58af8f12ec080aa001c:Subject: Outstanding Invoice\n  cf634f48daaea6741e9faa88c469bec475bf209be1c9af5d38718079cf08e2a2:Subject: Overdue Bill\n  8c2e3a44ffaa0e05a15952b4b457071e7dbdbd971d75e950f9cb50b5d298b93e:Subject: Unpaid Bill\n  d3e74bcff81007b0bfa96a03c4dc0ed96ab2fceca6a900046b389371f9b674ff:Subject: Outstanding Invoice\n  6341740a72abd8de5a3fcd06a4b1908ae3d8260af3a02f0d8782967bce11cc21:Subject: Outstanding Reminder\n  ```\n* In-advance of their campaign, they purchased several typo-squatting domains of the legal company they impersonated. Here are several I identified typosquatting Simmons and Simmons:\n  ```\n  mail-simmonslegal[.]com\n  simmonsimlegal[.]com\n  simmonsslslegal[.]com\n  simmonssslegal[.]com\n  slsssimmonslegal[.]com\n  sslsimmonslegal[.]com\n  sssimmonsandsimms[.]com\n  sssimmonslegal[.]com\n  ssslsimslegal[.]com\n  ```\n* The English used in the lures and their PDF was good but not perfect. They also used the same phrases and personas which were very high-fidelity for fingerprinting:\n  ```bash\n   #virustotal search \n   type:email content:\"Not to bother\"\n   type:email content:\"claire.freeman\"\n   ```\n   ![phrase-fingerprint.png](/images/uploads/crimsonkingsnake/phrase-fingerprint.png)\n* I was only able to find a few samples of invoices, but they weren't very good at hiding their tracks. The metadata of the PDFs were all the same user: `hpins`\n   ```bash\n    File Name                       : 38a3ef908d9764f26c2f75e7ed490f6e1c4802d3e3fd3944ec31fd199ddae823.pdf\n    Author                          : hpins\n    File Name                       : 6c0c4b781e487ce3313ba4e16d1bcd8a195bc3cdc23d77d85aad1f1307c87694.pdf\n    Author                          : hpins\n    File Name                       : c273b25f79ef736e25a983dfc5d7642d331c71e6ee5a2d3a07047d821f01bfc5.pdf\n    Author                          : hpins\n    File Name                       : d46a3d8e09f62caafad79260c4e115aee6681602236ccbfe472f8afe4baafe78.pdf\n    Author                          : hpins\n    File Name                       : ed08ec8ba73351d675855e7c07838000c92109ff4bf602b6070324b352ed84bc.pdf\n    Author                          : hpins\n   ```\n   \n   VirusTotal Search:\n   ```bash\n   #virustotal search \n   type:pdf metadata:hpins\n   ```\n* Based on the upload date and victim org from samples, Crimson Kingsnake seemed to be going alphabetically through a list of organisations, their targets would look like:\n  - **L**ocal Bank\n  - **M**etro Corp\n  - **N**ice Legal Firm\n\n    (all made up names for demo)\n* The victim organisations were usually large enterprises where an unpaid invoice would be a conceivable mistake. No specific sector was targeted, but target organisations were all western/from countries where English is a first language.\n\nIn summary, they appear to be a reasonably-resourced group, but aren't particularly covert in their operations.\n## VirusTotal LiveHunt Yara\n```\nimport \"vt\"\nrule CrimsonKingsnake\n{  \n  strings:\n      $emailphrase1 = \"claire freeman\" ascii wide nocase\n      $emailphrase2 = \"whitney chatterjee\" ascii wide nocase\n      $emailphrase3 = \"kirsty barnes\" ascii wide nocase\n      $emailphrase4 = \"Not to bother\" ascii wide\n      \n      $invoicemarker1 = { 41 75 74 68 6F 72 20 28 68 70 69 6E 73 29 }\n  \n  condition:\n      vt.metadata.new_file and\n     ((vt.metadata.file_type == vt.FileType.EMAIL or\n      vt.metadata.file_type == vt.FileType.OUTLOOK) and any of ($emailphrase*))\n      or (vt.metadata.file_type == vt.FileType.PDF and any of ($invoicemarker*))\n}\n```\n## Indicators:\nYou can also view the [VirusTotal collection](https://www.virustotal.com/gui/collection/8a2fdce716ab6a4ecba621cad1a167572783b4e6e317bc95da12582a0decc8e1). Hashes are of email samples and invoice PDFs:\n<div class=\"not-prose\">\n<pre class=\"indicators text-xs font-mono font-medium language-txt no-line-numbers\" data-prismjs-copy=\"Copy indicators\">\n<code>\nmail-simmonslegal[.]com\nsimmonsimlegal[.]com\nsimmonsslslegal[.]com\nsimmonssslegal[.]com\nslsssimmonslegal[.]com\nsslsimmonslegal[.]com\nsssimmonsandsimms[.]com\nsssimmonslegal[.]com\nssslsimslegal[.]com\nwork-desk02[.]space\n\n2dedde4721b194671eded509dbeb8a65ebc3d3e80a800d9a96f09a0a86e299a9\n2e29a32c2b53d2750ca7b2a865f66b84b68f79a9208bea2cb5c3f8423f66f160\n38a3ef908d9764f26c2f75e7ed490f6e1c4802d3e3fd3944ec31fd199ddae823\n40e1b183301320ab32752fa7e8ffe6843a3ee02e61d62dea644974b033d963e3\n6341740a72abd8de5a3fcd06a4b1908ae3d8260af3a02f0d8782967bce11cc21\n6c0c4b781e487ce3313ba4e16d1bcd8a195bc3cdc23d77d85aad1f1307c87694\n6d05039db3af11f2dd7be7965719956a42a3e0a7344d90af88b0737dda48b9bd\n88c3683258b2bac5dac5a52c0b84b24a1485e256efdf027e2c65f0398f98fb4a\n8c2e3a44ffaa0e05a15952b4b457071e7dbdbd971d75e950f9cb50b5d298b93e\n937bf2a08f5511be7120449a4c641f935b5a84c7caff35d64911f7a2511ea7aa\nc023d3548ee3a7188a526730687311ed1d0fe702aad667875fd288a31307390f\nc273b25f79ef736e25a983dfc5d7642d331c71e6ee5a2d3a07047d821f01bfc5\ncb62118602287e0e8d7db69edcb56b4a877fdace6a7519a53bc712229f2ca21f\ncf634f48daaea6741e9faa88c469bec475bf209be1c9af5d38718079cf08e2a2\nd3e74bcff81007b0bfa96a03c4dc0ed96ab2fceca6a900046b389371f9b674ff\nd46a3d8e09f62caafad79260c4e115aee6681602236ccbfe472f8afe4baafe78\ned08ec8ba73351d675855e7c07838000c92109ff4bf602b6070324b352ed84bc\nf40816615b7b38c517b47cdf6d4ff33a2f08e873b988d58af8f12ec080aa001c\nf76c3939f784af1740be04752c1f0929b9b6ec32ce9f20e41d6971edc684cd8d\n</code>\n</pre>\n</div>"}]